import http from 'http';
import { WebSocketServer } from 'ws';
import { connectDB } from './config';
import { PORT } from './config';
import { handleWebSocketConnection } from './services/websocketService';
import express from 'express';
import cors from 'cors';
import router from './routes';
import cookieParser from 'cookie-parser';

// Connect to MongoDB
connectDB();

const app = express();

app.use(cookieParser());

app.use(cors({
  origin:[`http://localhost:${process.env.FRONTEND_PORT}`],
  credentials:true,
}));

app.use(express.json());

app.use('/api', router);

app.get('/', (req, res) => {
  res.send('Welcome to the backend server.');
})

const server = http.createServer(app);
const wss = new WebSocketServer({ server });

wss.on('connection', handleWebSocketConnection);

server.listen(PORT, () => {
  console.log(`HTTP+WS server is running on port ${PORT}`);
});









// import { WebSocket, WebSocketServer } from 'ws';
// import { PORT, connectDB } from './config';
// import express, { Request, Response } from 'express';
// import http from 'http';
// import cors from 'cors';
// import { MessageModel } from './models/message';
// import { TaskModel } from './models/task';
// import { UserModel } from './models/user';
// import { RoomModel } from './models/room';

// import dotenv from 'dotenv';

// dotenv.config();

// // Define message types
// interface Message {
//   type: 'message' | 'join' | 'history';
//   payload: {
//     roomId: string;
//     userId: string;
//     message: string;
//     time: string;
//   };
// }
// interface User {
//   userId: string;
//   roomId: string;
//   ws: WebSocket;
// }

// // Connect to MongoDB
// connectDB();

// const app = express();
// app.use(cors());
// app.use(express.json());

// // GET or initialize tasks for a user
// app.get(
//   '/api/tasks/:userId',
//   async (req: Request, res: Response) => {
//     const { userId } = req.params;
//     let tasks = await TaskModel.findOne({ userId });
//     if (!tasks) {
//       tasks = new TaskModel({ userId, todo: [], doing: [], done: [] });
//       await tasks.save();
//     }
//     res.json(tasks);
//   }
// );

// // Upsert tasks
// app.post(
//   '/api/tasks',
//   async (req: Request, res: Response) => {
//     const { userId, todo, doing, done } = req.body;
//     const updated = await TaskModel.findOneAndUpdate(
//       { userId },
//       { todo, doing, done },
//       { upsert: true, new: true }
//     );
//     res.json(updated);
//   }
// );

// // Create a new user
// app.post('/api/users', async (req: Request, res: Response) => {
//   const { userName, password } = req.body;

//   try {
//     const newUser = new UserModel({
//       // userId is auto-generated by MongoDB
//       userName,
//       password,
//       rooms: [] // Initially empty
//     });
//     await newUser.save();
//     res.status(201).json(newUser);
//   } catch (error) {
//     console.error('Error creating user:', error);
//     res.status(500).json({ message: 'Error creating user' });
//   }
// });

// // Create a new room
// app.post('/api/rooms', async (req: Request, res: Response) => {
//   const { roomName } = req.body;

//   try {
//     const newRoom = new RoomModel({
//       roomName,
//       usersList: [] // Initially empty
//     });
//     await newRoom.save();
//     res.status(201).json(newRoom);
//   } catch (error) {
//     console.error('Error creating room:', error);
//     res.status(500).json({ message: 'Error creating room' });
//   }
// });

// // Add a user to a room
// app.post('/api/rooms/:roomId/users/:userId', async (req: Request, res: Response) => {
//   const { roomId, userId } = req.params;

//   try {
//     // Add user to the room's usersList
//     await RoomModel.findByIdAndUpdate(roomId, { $addToSet: { usersList: userId } });
//     // Add room to the user's rooms
//     await UserModel.findByIdAndUpdate(userId, { $addToSet: { rooms: roomId } });

//     res.status(200).json({ message: 'User added to room successfully' });
//   }
//   catch (error) {
//     console.error('Error adding user to room:', error);
//     res.status(500).json({ message: 'Error adding user to room' });
//   }
// });

// const server = http.createServer(app);
// const wss = new WebSocketServer({ server });

// // Use Maps for better performance when accessing data
// const users = new Map<string, User>(); // userId -> User
// const rooms = new Map<string, Set<string>>(); // roomId -> Set of userIds

// // Helper function to broadcast to a specific room
// function broadcastToRoom(roomId: string, message: Message) {
//   const roomUserIds = rooms.get(roomId);
//   if (!roomUserIds) return;

//   roomUserIds.forEach(userId => {
//     const user = users.get(userId);
//     if (user && user.ws.readyState === WebSocket.OPEN) {
//       user.ws.send(JSON.stringify(message));
//     }
//   });
// }

// // Helper function to get current time
// function getCurrentTime(): string {
//   return new Date().toISOString();
// }

// // Helper function to load chat history
// async function loadChatHistory(roomId: string, ws: WebSocket) {
//   try {
//     const messages = await MessageModel.find({ roomId })
//       .sort({ time: 1 })
//       .limit(10); // Limit to last 10 messages

//     const historyMessage: Message = {
//       type: 'history',
//       payload: {
//         roomId,
//         userId: 'system',
//         message: JSON.stringify(messages),
//         time: getCurrentTime()
//       }
//     };

//     ws.send(JSON.stringify(historyMessage));
//   } catch (error) {
//     console.error('Error loading chat history:', error);
//   }
// }

// wss.on('connection', (ws: WebSocket) => {
//   // this can be used if there is no room general.
//   // console.log('New client connected');

//   ws.on('message', async (data: string) => {
//     try {
//       const message: Message = JSON.parse(data);

//       if (message.type === 'join') {
//         // Handle user joining a room
//         const userId = message.payload.userId;
//         const roomId = message.payload.roomId;

//         // Remove user from previous room if they were in one
//         const existingUser = users.get(userId);
//         if (existingUser) {
//           const oldRoom = existingUser.roomId;
//           const oldRoomUsers = rooms.get(oldRoom);
//           if (oldRoomUsers) {
//             oldRoomUsers.delete(userId);
//             if (oldRoomUsers.size === 0) {
//               rooms.delete(oldRoom);
//             }
//           }
//         }

//         // Add user to new room
//         const user: User = {
//           userId,
//           roomId,
//           ws
//         };
//         users.set(userId, user);

//         // Add user to room's set of users
//         if (!rooms.has(roomId)) {
//           rooms.set(roomId, new Set());
//         }
//         rooms.get(roomId)?.add(userId);

//         // Load chat history for the room
//         await loadChatHistory(roomId, ws);

//         // Only broadcast join message if user is joining a new room
//         if (!existingUser || existingUser.roomId !== roomId) {
//           broadcastToRoom(roomId, message);
//           console.log(`User ${userId} joined room ${roomId}`);
//         }
//       }
//       else if (message.type === 'message') {
//         // Save message to MongoDB
//         const newMessage = new MessageModel({
//           roomId: message.payload.roomId,
//           userId: message.payload.userId,
//           message: message.payload.message,
//           time: new Date(message.payload.time)
//         });
//         await newMessage.save();

//         // Broadcast message to room
//         broadcastToRoom(message.payload.roomId, message);
//       }
//     } catch (error) {
//       console.error('Error processing message:', error);
//     }
//   });

//   ws.on('close', async () => {
//     // Find and remove the disconnected user
//     for (const [userId, user] of users.entries()) {
//       if (user.ws === ws) {
//         // Remove user from room
//         const roomId = user.roomId;
//         const roomUsers = rooms.get(roomId);
//         if (roomUsers) {
//           roomUsers.delete(userId);
//           if (roomUsers.size === 0) {
//             rooms.delete(roomId);
//           }
//         }

//         // Remove user from users map
//         users.delete(userId);

//         // Create and save leave message to MongoDB
//         const leaveMessage: Message = {
//           type: 'message' as const,
//           payload: {
//             roomId,
//             userId: 'system',
//             message: `${userId} has left the room`,
//             time: new Date().toISOString()
//           }
//         };

//         try {
//           // Save to MongoDB
//           const newMessage = new MessageModel({
//             roomId: leaveMessage.payload.roomId,
//             userId: leaveMessage.payload.userId,
//             message: leaveMessage.payload.message,
//             time: new Date(leaveMessage.payload.time)
//           });
//           await newMessage.save();

//           // Broadcast leave message
//           broadcastToRoom(roomId, leaveMessage);
//           console.log(`User ${userId} disconnected from room ${roomId}`);
//         } catch (error) {
//           console.error('Error saving leave message:', error);
//         }
//         break;
//       }
//     }
//   });
// });

// server.listen(PORT, () => {
//   console.log(`HTTP+WS server is running on port ${PORT}`);
// });
